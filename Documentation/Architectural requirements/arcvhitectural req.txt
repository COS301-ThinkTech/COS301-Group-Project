/**

	Created by Hlavutelo Maluleke (26-05-2015)

	Architectural rewuirements documentation

	To be transformed into latex->pdf.

**/


1. Access and integration requirements

1.1 Access channels

1.1.1 Human access channels

This application is accessible on a desktop computer running the Linux operating system, with a possibilty of making the application accessible on a desktop computer running the Windows operating system.

The Graphical User Interface (GUI) design will primarily implement communication between users and the system.

1.1.2 System access channels

The system is not required to interface with any existing systems. It is only intended for execution on a desktop computer running the Linux operating system.

1.2 Integration channels

Since no other system interfaces with this system, no integration is required except of that of the internal modules.

// Comment/question: the OS has none to do with integration I suppose.


2. Architectural responsibilities


3. Quality requirements

Security:
	Security is not a concern.

Reliability:
	Any valid program expressed as a flowchart, without errors, is executable. In cases where errors are detected, sufficient feedback will be generated and provided to the user. A flowchart without any errors will generate output and feedback will also be provided.

Maintainability:
	Since the whole system will be coded using Object-Oriented Programming (OOP), it will be much easy to update and maintain the system. OOP allows the future development to the system.

Testability:
	The GUI will provide a testing environment to the system, this will provide all the fuctionalities a standard and a complex flowchart can provide. When thorough GUI testing has been conducted, all detected malfunctions can be corected.

Usability:
	With the drag-and-drop functionality, the entire system will be very much easier to use; and also, pre-defined programming operations (eg. loops, conditional statements etc.) will be present. This is solely to enhance users to implement these operations without any standard programming langauge. Consequently the system will be independent of programming languages.

Perfomance:
	Performance is not a major concern. However, to ensure the system must provide feedback to the user during flowchart building and execution in a reasonable amount of time appropriate data structures and adequate design patterns will be used.

Availability:
	The application is available to all desktops running Linux operating system.


4. Architecture constraints

Depending on which programming language best suits the interest of programmers, any language will be suitable. Preferably Java and C++. The system will resemble more or less the same programming styles used in Java and C++.