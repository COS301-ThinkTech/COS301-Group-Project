\documentclass[11pt,a4paper,titlepage]{article}
\usepackage{graphicx}
\usepackage[margin=1in]{geometry}
%\usepackage{titling}
\usepackage[hidelinks]{hyperref}



\begin{document}
\input{./titlepage.tex}

\tableofcontents
\pagebreak

\section{Architecture design}

\subsection{Overview}

The Model-View-Controller allows for dividing the application in three components, making the problem domain independent from the user interface.
A controller as the ability to send commands to the model to update the model's state (e.g., adding a component to the flowchart). It can also send commands to the associated view to change the view's presentation of the model (e.g. maximizing the flowchart window)
A model stores data that is retrieved by the controller and displayed in the view.
A view requests information from the model that it uses to generate an output representation to the user.


\subsection{Architectural tactics addressing quality requirements}

This section discusses the architectural tactics which are used to concretely address the quality requirements for the Flowchart and Simulation Tool application.

\subsubsection{Contracts based development}

Contracts allow the application to adhere to the following quality requirements:
Testability and maintainability.
The contracts will be enforced fo services  with pre and post-conditions which are assessed in unit tests, and data structure constraints enforced through data structure validation.

\subsubsection{Dependency Injection}

Dependency injection allows for the application to adhere to the following quality requirements:
Flexibility, deployability, testability.

\subsubsection{Minimize technology suite}

In order to improve maintainability the software architecture will minimize the number of programming languages  used.

\subsection{Architectural components}

This section discusses the architectural components and technologies used to address
the architectural responsibilities and the architectural tactics chosen to address the quality requirements

\subsubsection{Java}

Javat is chosen as a single programming language used for the appliaction in order to implement the tactic of minimizing the technology suite.  Using a single programming language reduces complexity and improves maintainability.

\subsection{Development architecture}

The development architecture is the architecture designed to support qualities in the development process itself. This
includes qualities like reliability.

\subsubsection{Version control}

The developer of the project make use of a git repository. Any new feature or bug should be developed in a new branch which is only merged into the trunk once the feature or passes its unit tests.

\subsection{IDE}

Each developer has the freedom to choose whichever IDE they prefer. 

\subsection{Unit testing}

Unit testing will be done using JUnit.

\subsection{Bug tracking}

The projects will use GitHub's issue tracker for bug tracking.





	
\end{document}
